<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>SpringBoot学习历程：Servlets, Filters, listeners注解</title>
      <link href="/2018/09/03/SpringBoot%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B%EF%BC%9AServlets-Filters-listeners%E6%B3%A8%E8%A7%A3/"/>
      <url>/2018/09/03/SpringBoot%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B%EF%BC%9AServlets-Filters-listeners%E6%B3%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="WebServlet"><a href="#WebServlet" class="headerlink" title="@WebServlet"></a>@WebServlet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cfm.util.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义servlet</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(name = <span class="string">"customServlet"</span>, urlPatterns = <span class="string">"/custom"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"servlet get method"</span>);</span><br><span class="line">doPost(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"servlet post method"</span>);</span><br><span class="line">response.getWriter().write(<span class="string">"hello world"</span>);</span><br><span class="line">response.flushBuffer();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WebListener"><a href="#WebListener" class="headerlink" title="@WebListener"></a>@WebListener</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cfm.util.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"contextInitialized"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"contextDestroyed"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WebFilter"><a href="#WebFilter" class="headerlink" title="@WebFilter"></a>@WebFilter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cfm.util.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"customFilter"</span>, urlPatterns = <span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"init filter"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"do filter"</span>);</span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"destroy filter"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> SpringBoot 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springBoot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot学习历程：异常处理</title>
      <link href="/2018/09/03/SpringBoot%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B%EF%BC%9A%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2018/09/03/SpringBoot%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B%EF%BC%9A%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="方法一：Spring-Boot-将所有的错误默认映射到-error，-实现ErrorController"><a href="#方法一：Spring-Boot-将所有的错误默认映射到-error，-实现ErrorController" class="headerlink" title="方法一：Spring Boot 将所有的错误默认映射到/error， 实现ErrorController"></a>方法一：Spring Boot 将所有的错误默认映射到/error， 实现ErrorController</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"error"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseErrorController</span> <span class="keyword">implements</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(BaseErrorController.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getErrorPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">logger.info(<span class="string">"出错啦！进入自定义错误控制器"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"error/error"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">error</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getErrorPath();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法二：添加自定义的错误页面"><a href="#方法二：添加自定义的错误页面" class="headerlink" title="方法二：添加自定义的错误页面"></a>方法二：添加自定义的错误页面</h2><ul><li><p>html静态页面：在resources/public/error/ 下定义<br>如添加404页面： resources/public/error/404.html页面，中文注意页面编码</p></li><li><p>模板引擎页面：在templates/error/下定义<br>如添加5xx页面： templates/error/5xx.ftl<br>注：templates/error/ 这个的优先级比较 resources/public/error/高</p></li></ul><h2 id="方法三：使用注解-ControllerAdvice"><a href="#方法三：使用注解-ControllerAdvice" class="headerlink" title="方法三：使用注解@ControllerAdvice"></a>方法三：使用注解@ControllerAdvice</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cfm.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorExceptionHandler</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一异常处理</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exception</span></span><br><span class="line"><span class="comment"> *            exception</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(&#123; RuntimeException.class &#125;)</span><br><span class="line"><span class="meta">@ResponseStatus</span>(HttpStatus.OK)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">processException</span><span class="params">(RuntimeException exception)</span> </span>&#123;</span><br><span class="line">logger.info(<span class="string">"自定义异常处理-RuntimeException"</span>);</span><br><span class="line">ModelAndView m = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">m.addObject(<span class="string">"Exception"</span>, exception.getMessage());</span><br><span class="line">m.setViewName(<span class="string">"error/500"</span>);</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一异常处理</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exception</span></span><br><span class="line"><span class="comment"> *            exception</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(&#123; Exception.class &#125;)</span><br><span class="line"><span class="meta">@ResponseStatus</span>(HttpStatus.OK)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">processException</span><span class="params">(Exception exception)</span> </span>&#123;</span><br><span class="line">logger.info(<span class="string">"自定义异常处理-Exception"</span>);</span><br><span class="line">ModelAndView m = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">m.addObject(<span class="string">"Exception"</span>, exception.getMessage());</span><br><span class="line">m.setViewName(<span class="string">"error/500"</span>);</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> SpringBoot 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springBoot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot学习历程：日志配置-logback和log4j2</title>
      <link href="/2018/08/31/SpringBoot%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B%EF%BC%9A%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE-logback%E5%92%8Clog4j2/"/>
      <url>/2018/08/31/SpringBoot%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B%EF%BC%9A%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE-logback%E5%92%8Clog4j2/</url>
      <content type="html"><![CDATA[<h2 id="默认配置文件配置"><a href="#默认配置文件配置" class="headerlink" title="默认配置文件配置"></a>默认配置文件配置</h2><figure class="highlight profile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 日志文件名，比如：test.log，或者是 /var/log/test.log</span><br><span class="line">logging.file=test.log </span><br><span class="line"># 日志级别配置，比如： logging.level.org.springframework=DEBUG</span><br><span class="line">logging.level.*=info</span><br><span class="line">logging.level.org.springframework=DEBUG</span><br></pre></td></tr></table></figure><p>不建议使用：不够灵活，对log4j2等不够友好</p><h2 id="引用外部配置文件"><a href="#引用外部配置文件" class="headerlink" title="引用外部配置文件"></a>引用外部配置文件</h2><h3 id="logback配置方式"><a href="#logback配置方式" class="headerlink" title="logback配置方式"></a>logback配置方式</h3><p>spring boot默认会加载classpath:logback-spring.xml或者classpath:logback-spring.groovy</p><p>下面是一个logback-spring.xml的例子：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>  <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"./"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文件输出格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"PATTERN"</span> <span class="attr">value</span>=<span class="string">"%-12(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;) |-%-5level [%thread] %c [%L] -| %msg%n"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--输出到文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/logback.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="/pic_home/springboot1/1535859992760.png" alt="avatar"></p><h4 id="根节点包含的属性"><a href="#根节点包含的属性" class="headerlink" title="根节点包含的属性"></a>根节点<configuration>包含的属性</configuration></h4><ul><li>scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</li><li>scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。</li><li>debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</li></ul><h4 id="根节点的属性和子节点"><a href="#根节点的属性和子节点" class="headerlink" title="根节点的属性和子节点"></a>根节点<configuration>的属性和子节点</configuration></h4><ul><li>属性一：设置上下文名称&lt;contextName&gt;每个logger都关联到logger上下文，默认上下文名称为“default”。</li><li>属性二：设置变量&lt;property&gt; 用来定义变量值的标签， 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。</li><li><p>子节点一：&lt;appender&gt;用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span>表示对日志进行编码：</span><br><span class="line">%d&#123;HH: mm:ss.SSS&#125;——日志输出时间</span><br><span class="line">%thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用</span><br><span class="line">%-5level——日志级别，并且使用5个字符靠左对齐</span><br><span class="line">%logger&#123;36&#125;——日志输出者的名字</span><br><span class="line">%msg——日志消息</span><br><span class="line">%n——平台的换行符</span><br><span class="line"></span><br><span class="line">RollingFileAppender用于切分文件日志：</span><br><span class="line"><span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/logback.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span>定义了日志的切分方式——把每一天的日志归档到一个文件中。</span><br><span class="line"><span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span>表示只保留最近30天的日志。</span><br><span class="line">%d&#123;yyyy-MM-dd_HH-mm&#125;定义精确到分的日志切分方式。</span><br><span class="line"><span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>1GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span>用来指定日志文件的上限大小。</span><br></pre></td></tr></table></figure></li><li><p>子节点二：&lt;root&gt; level用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL，默认是DEBUG。<br>  可以包含零个或多个元素，标识这个appender将会添加到这个logger。</p></li><li><p>子节点三：&lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name：用来指定受此logger约束的某一个包或者具体的某一个类。</span><br><span class="line">level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。</span><br><span class="line">addtivity：是否向上级logger传递打印信息。默认是true。</span><br></pre></td></tr></table></figure></li></ul><h3 id="log4j2配置方式"><a href="#log4j2配置方式" class="headerlink" title="log4j2配置方式"></a>log4j2配置方式</h3><p>在classpath添加log4j2.xml或者log4j2-spring.xml（spring boot 默认加载）</p><ul><li>去除logback的依赖包，添加log4j2的依赖包</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用log4j2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>log4j2-spring.xml配置 </li></ul><p>以下是网上找来比较全面的log4j2-spring.xml配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="comment">&lt;!--设置log4j2的自身log级别为warn--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，</span></span><br><span class="line"><span class="comment">    当设置成trace时，你会看到log4j2内部各种详细输出--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">"warn"</span> <span class="attr">monitorInterval</span>=<span class="string">"30"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--先定义所有的appender--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这个输出控制台的配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--输出日志的格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">"log"</span> <span class="attr">fileName</span>=<span class="string">"log/test.log"</span> <span class="attr">append</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，</span></span><br><span class="line"><span class="comment">        则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileInfo"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/hpaasvc/info.log"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/hpaasvc/$$&#123;date:yyyy-MM&#125;/info-%d&#123;yyyy-MM-dd&#125;-%i.log"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"INFO"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"WARN"</span> <span class="attr">onMatch</span>=<span class="string">"DENY"</span> <span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"100 MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileWarn"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/hpaasvc/warn.log"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/hpaasvc/$$&#123;date:yyyy-MM&#125;/warn-%d&#123;yyyy-MM-dd&#125;-%i.log"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"WARN"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> <span class="attr">onMatch</span>=<span class="string">"DENY"</span> <span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"100 MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"20"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileError"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/hpaasvc/error.log"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"$&#123;sys:user.home&#125;/logs/hpaasvc/$$&#123;date:yyyy-MM&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"ERROR"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"100 MB"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--过滤掉spring和hibernate的一些无用的debug信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.mybatis"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"all"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileInfo"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileWarn"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileError"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="程序引入"><a href="#程序引入" class="headerlink" title="程序引入"></a>程序引入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(HelloController.class);</span><br><span class="line">logger.info(<span class="string">"this is info"</span>);</span><br></pre></td></tr></table></figure><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><ul><li>性能比较：Log4J2 和 Logback 都优于 log4j（不推荐使用）</li><li>配置方式：Logback最简洁，spring boot默认，推荐使用</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://tengj.top/2017/04/05/springboot7/" title="Spring Boot干货系列：（七）默认日志logback配置解析" target="_blank" rel="noopener">http://tengj.top/2017/04/05/springboot7/</a></p><p><a href="https://blog.csdn.net/V_Come_On/article/details/79408773" title="Spring Boot系列教程六：日志输出配置log4j2" target="_blank" rel="noopener">https://blog.csdn.net/V_Come_On/article/details/79408773</a></p>]]></content>
      
      <categories>
          
          <category> SpringBoot 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springBoot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mysql concat用法</title>
      <link href="/2018/08/31/Mysql-concat%E7%94%A8%E6%B3%95/"/>
      <url>/2018/08/31/Mysql-concat%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="concat-函数"><a href="#concat-函数" class="headerlink" title="concat()函数"></a>concat()函数</h2><p>1、 功能：将多个字符串连接成一个字符串。</p><p>2、语法：concat(str1, str2,…)</p><p>返回结果为连接参数产生的字符串，如果有任何一个参数为null，则返回值为null。</p><p>例如：</p><p>返回结果为连接参数产生的字符串：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="string">'aa'</span>,<span class="string">'bb'</span>,<span class="string">'cc'</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">concat(&apos;aa&apos;,&apos;bb&apos;,&apos;cc&apos;)  </span><br><span class="line">------------------------</span><br><span class="line">aabbcc</span><br></pre></td></tr></table></figure><p>连接字段：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="keyword">ID</span>,<span class="keyword">NAME</span>,PID) <span class="keyword">AS</span> info <span class="keyword">FROM</span> tb_city</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">info                                    </span><br><span class="line">----------------------------------------</span><br><span class="line">1北京市1                             </span><br><span class="line">2天津市2                             </span><br><span class="line">3石家庄市3                          </span><br><span class="line">4唐山市3                             </span><br><span class="line">5秦皇岛市3  </span><br><span class="line">(NULL)                        </span><br><span class="line">7邢台市3</span><br></pre></td></tr></table></figure><p>中间有一行为null是因为表中有一行的ID,NAME,PID中某一值为null。</p><h2 id="concat-ws-函数"><a href="#concat-ws-函数" class="headerlink" title="concat_ws()函数"></a>concat_ws()函数</h2><p>1、功能：contcat_ws() 代表 CONCAT With Separator ，是CONCAT()的特殊形式。第一个参数是其它参数的分隔符。分隔符的位置放在要连接的两个字符串之间。分隔符可以是一个字符串，也可以是其它参数。</p><p>2、语法：concat_ws(separator, str1, str2, …)<br>如果分隔符为 NULL，则结果为 NULL。函数会忽略任何分隔符参数后的 NULL 值。</p><p>例如：</p><p>连接后以逗号分隔 ：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT_WS</span>(<span class="string">','</span>,<span class="string">'aa'</span>,<span class="string">'bb'</span>,<span class="string">'cc'</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">concat_ws(&apos;,&apos;,&apos;aa&apos;,&apos;bb&apos;,&apos;cc&apos;)  </span><br><span class="line">-------------------------------</span><br><span class="line">aa,bb,cc</span><br></pre></td></tr></table></figure><p>把分隔符指定为null，结果全部变成了null：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="literal">NULL</span>,<span class="keyword">ID</span>,<span class="keyword">NAME</span>,PID) <span class="keyword">AS</span> info <span class="keyword">FROM</span> tb_city</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">info    </span><br><span class="line">--------</span><br><span class="line">(NULL)  </span><br><span class="line">(NULL)  </span><br><span class="line">(NULL)  </span><br><span class="line">(NULL)  </span><br><span class="line">(NULL)  </span><br><span class="line">(NULL)  </span><br><span class="line">(NULL)  </span><br><span class="line">(NULL)</span><br></pre></td></tr></table></figure><h2 id="group-concat-函数"><a href="#group-concat-函数" class="headerlink" title="group_concat()函数"></a>group_concat()函数</h2><p>1、功能：将group by产生的同一个分组中的值连接起来，返回一个字符串结果。</p><p>2、 语法：group_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc ] [separator ‘分隔符’] )<br>说明：通过使用distinct可以排除重复值；如果希望对结果中的值进行排序，可以使用order by子句；separator是一个字符串值，缺省为一个逗号。</p><p>假如不使用group by进行查询：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> goods_id,seller_id <span class="keyword">FROM</span> <span class="string">`jyg_goods`</span></span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">seller_id  goods_id  </span><br><span class="line">---------  ----------</span><br><span class="line">        7           1</span><br><span class="line">        7           2</span><br><span class="line">        7           3</span><br><span class="line">        7           4</span><br><span class="line">        7           5</span><br><span class="line">        7           6</span><br><span class="line">        7           7</span><br><span class="line">        7           8</span><br><span class="line">        7           9</span><br><span class="line">        7          10</span><br><span class="line">        8          11</span><br><span class="line">        8          12</span><br></pre></td></tr></table></figure><p>查询结果同一个seller_id出现多次，这样看上去就很难受。这样的一对多关系可以使用group_concat()和group by查询结果格式为seller_id  goods_id1,goods_id2……：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> seller_id, <span class="keyword">GROUP_CONCAT</span>(goods_id) <span class="keyword">FROM</span> <span class="string">`jyg_goods`</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> seller_id</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">seller_id  group_concat(goods_id)            </span><br><span class="line">---------  ----------------------------------</span><br><span class="line">        7  1,2,3,4,5,6,7,8,9,10              </span><br><span class="line">        8  11,12</span><br></pre></td></tr></table></figure><p>将上面的goods_id号从大到小排序，且用’_’作为分隔符：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> seller_id, <span class="keyword">GROUP_CONCAT</span>(goods_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> goods_id <span class="keyword">DESC</span> SEPARATOR <span class="string">'_'</span>) <span class="keyword">FROM</span> <span class="string">`jyg_goods`</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> seller_id</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">seller_id  group_concat(goods_id order by goods_id desc separator &apos;_&apos;)  </span><br><span class="line">---------  -------------------------------------------------------------</span><br><span class="line">        7  10_9_8_7_6_5_4_3_2_1                                         </span><br><span class="line">        8  12_11</span><br></pre></td></tr></table></figure><h2 id="Oracle中的concat-函数"><a href="#Oracle中的concat-函数" class="headerlink" title="Oracle中的concat()函数"></a>Oracle中的concat()函数</h2><p>1、concat()</p><p>区别：Oracle中的concat只能连接两个字符串，只要有一个字符串不是NULL,就不会返回NULL。</p><p>若要连接三个以上可以采用以下方式：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="keyword">concat</span>(<span class="string">'aa'</span>, <span class="string">'bb'</span>), <span class="string">'cc'</span>)</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'aa'</span>||<span class="string">'bb'</span>||<span class="string">'cc'</span></span><br></pre></td></tr></table></figure></p><p>2、wmsys.wm_concat()</p><p>区别：Oracle中没有concat_ws()和group_concat()函数。</p><p>group_concat()可以使用wm_concat()函数代替：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">select</span> <span class="keyword">id</span>,wmsys.wm_concat(items) <span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">table</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span>;</span><br></pre></td></tr></table></figure></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://baijiahao.baidu.com/s?id=1595349117525189591&amp;wfr=spider&amp;for=pc" title="MySQL教程之concat以及group_concat的用法" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1595349117525189591&amp;wfr=spider&amp;for=pc</a></p><p><a href="https://www.cnblogs.com/yingmo/p/6148360.html" title="MySQL中concat函数" target="_blank" rel="noopener">https://www.cnblogs.com/yingmo/p/6148360.html</a></p><p><a href="https://blog.csdn.net/mengtianyalll/article/details/38436367" title="mysql及oracle中的group_contact小结" target="_blank" rel="noopener">https://blog.csdn.net/mengtianyalll/article/details/38436367</a></p>]]></content>
      
      <categories>
          
          <category> Mysql随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Oracle rownum用法</title>
      <link href="/2018/08/30/Oracle-rownum%E7%94%A8%E6%B3%95/"/>
      <url>/2018/08/30/Oracle-rownum%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="rownum是什么"><a href="#rownum是什么" class="headerlink" title="rownum是什么"></a>rownum是什么</h2><p>rownum是一种伪列，它会根据返回记录生成一个序列化的数字。</p><h2 id="对rownum进行-gt-、-gt-、-操作"><a href="#对rownum进行-gt-、-gt-、-操作" class="headerlink" title="对rownum进行&gt;、&gt;=、=操作"></a>对rownum进行&gt;、&gt;=、=操作</h2><p>不能对rownum使用&gt;（大于1的数值）、&gt;=（大于或等于1的数值）、=（大于或等于1的数值），否则无结果</p><p>原因：</p><ul><li><p>rownum是伪列，必须要要有返回结果后，每条返回记录就会对应产生一个rownum数值；</p></li><li><p>返回结果记录的rownum是从1开始排序的，因此第一条始终是1;</p></li></ul><p><img src="/pic_home/oracle/1535639866115.png" alt="avatar"></p><p>可以改成以下方式执行：</p><p>查询rownum=2的数据：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> STU_ID,STU_NAME</span><br><span class="line">   <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> STU_ID,STU_NAME, <span class="keyword">ROWNUM</span> <span class="keyword">AS</span> RN <span class="keyword">FROM</span> STUDENT)</span><br><span class="line">    <span class="keyword">WHERE</span> RN = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><p>查询rownum &gt; 2的数据：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT</span><br><span class="line"><span class="keyword">MINUS</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">ROWNUM</span> &lt;= <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><h2 id="rownum与order-by"><a href="#rownum与order-by" class="headerlink" title="rownum与order by"></a>rownum与order by</h2><p>在使用rownum时，只有当Order By的字段是主键时，查询结果才会先排序再计算rownum。<br>对非主键字段进行排序时就会产生混乱，产生混乱的原因是：oracle先按物理存储位置（rowid）顺序取出满足rownum条件的记录，然后在对这些数据按照Order By的字段进行排序，而不是我们所期望的先排序、再取特定记录数。</p><p>对非主键字段排序再取前n条数据，我们可以用以下方式实现：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> STU_ID, STU_NAME</span><br><span class="line">  <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> STU_ID,STU_NAME <span class="keyword">FROM</span> STUDENT</span><br><span class="line">        <span class="keyword">ORDER</span> <span class="keyword">BY</span> STU_NAME)</span><br><span class="line">     <span class="keyword">WHERE</span> <span class="keyword">ROWNUM</span> &lt;= <span class="number">5</span>;</span><br></pre></td></tr></table></figure></p><h2 id="rownum分页"><a href="#rownum分页" class="headerlink" title="rownum分页"></a>rownum分页</h2><ul><li><p>方式1：<br>SELECT <em><br>FROM (SELECT ROWNUM R, A.</em> FROM STUDENT A WHERE ROWNUM &lt;= 10)<br>WHERE R &gt;= 5;</p></li><li><p>方式2：<br>SELECT <em><br>FROM (SELECT ROWNUM R, A.</em> FROM STUDENT A)<br>WHERE R BETWEEN 5 AND 10;</p></li><li><p>方式3：<br>SELECT <em> FROM STUDENT WHERE ROWNUM &lt;= 10 MINUS<br>SELECT </em> FROM STUDENT WHERE ROWNUM &lt; 5;</p></li></ul><h2 id="Mysql使用rownum"><a href="#Mysql使用rownum" class="headerlink" title="Mysql使用rownum"></a>Mysql使用rownum</h2><p>MySQL 下面没有rownum，以下是在网上查到的曲线自救方法：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">rownum</span> := @<span class="keyword">rownum</span>+<span class="number">1</span> <span class="keyword">AS</span> <span class="keyword">rownum</span>, </span><br><span class="line">               table1.*</span><br><span class="line">          <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> @<span class="keyword">rownum</span>:=<span class="number">0</span>) r ，</span><br><span class="line">               table1;</span><br></pre></td></tr></table></figure></p><p>在我项目中用到的rownum语句：</p><ul><li><p>Oracle：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TT.* <span class="keyword">FROM</span>( <span class="keyword">SELECT</span> <span class="keyword">ROWNUM</span> <span class="keyword">AS</span> RN,TA.* <span class="keyword">FROM</span>(  </span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> TB_PROPERTY  <span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span> property_key <span class="keyword">like</span>  <span class="keyword">concat</span>(<span class="keyword">CONCAT</span>(<span class="string">'%'</span>,#&#123;<span class="keyword">key</span>&#125;), <span class="string">'%'</span>)</span><br><span class="line"><span class="keyword">AND</span> property_value <span class="keyword">like</span>  <span class="keyword">concat</span>(<span class="keyword">CONCAT</span>(<span class="string">'%'</span>,#&#123;<span class="keyword">value</span>&#125;), <span class="string">'%'</span>) </span><br><span class="line"> )TA </span><br><span class="line"> <span class="keyword">where</span> <span class="keyword">ROWNUM</span> &lt;= #&#123;pagination.endNum&#125; </span><br><span class="line">)TT <span class="keyword">where</span> <span class="number">-1</span> != #&#123;pagination.startNum&#125; <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">ID</span> <span class="keyword">DESC</span>,  PROPERTY_INDEX</span><br></pre></td></tr></table></figure></li><li><p>Mysql：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span>( <span class="keyword">SELECT</span> @<span class="keyword">rownum</span>:=@<span class="keyword">rownum</span>+<span class="number">1</span>  RN,TA.* <span class="keyword">FROM</span>(  </span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> TB_ESHOP_SYSTEMCONFIGS  <span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span> property_key <span class="keyword">like</span>  <span class="keyword">concat</span>(<span class="string">'%'</span>,#&#123;<span class="keyword">key</span>&#125;, <span class="string">'%'</span>)</span><br><span class="line"><span class="keyword">AND</span> property_value <span class="keyword">like</span>  <span class="keyword">concat</span>(<span class="string">'%'</span>,#&#123;<span class="keyword">value</span>&#125;, <span class="string">'%'</span>) </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">ID</span> <span class="keyword">DESC</span>,  PROPERTY_INDEX  )TA </span><br><span class="line">)TT <span class="keyword">where</span> <span class="number">-1</span> != #&#123;pagination.startNum&#125; <span class="keyword">limit</span> #&#123;pagination.startNum&#125;,#&#123;pagination.pageSize&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.blogjava.net/conans/articles/219693.html" title="Oracle中ROWNUM的使用" target="_blank" rel="noopener">http://www.blogjava.net/conans/articles/219693.html</a></p><p><a href="https://www.cnblogs.com/lanzi/archive/2012/02/08/2343306.html" title="rownum的使用-分页" target="_blank" rel="noopener">https://www.cnblogs.com/lanzi/archive/2012/02/08/2343306.html</a></p><p><a href="https://blog.csdn.net/u012102536/article/details/59112054/" title="mysql 用 @rownum := @rownum+1 实现 rownum 功能" target="_blank" rel="noopener">https://blog.csdn.net/u012102536/article/details/59112054/</a></p>]]></content>
      
      <categories>
          
          <category> Oracle随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot 学习历程 ： 配置文件</title>
      <link href="/2018/08/29/SpringBoot-%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B-%EF%BC%9A-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2018/08/29/SpringBoot-%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B-%EF%BC%9A-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring Boot使用了一个全局的配置文件application.properties，放在src/main/resources目录下或者类路径的/config下。Sping Boot的全局配置文件的作用是对一些默认配置的配置值进行修改。</p><h2 id="随机值配置"><a href="#随机值配置" class="headerlink" title="随机值配置"></a>随机值配置</h2><p>application.properties的代码：<br><figure class="highlight profile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cfm.secret=$&#123;random.value&#125;</span><br><span class="line">cfm.number=$&#123;random.int&#125;</span><br><span class="line">cfm.bignumber=$&#123;random.long&#125;</span><br><span class="line">cfm.number.less.than.ten=$&#123;random.int(10)&#125;</span><br><span class="line">cfm.number.in.range=$&#123;random.int[1024,65536]&#125;</span><br></pre></td></tr></table></figure></p><p>读取使用注解：@Value(value = “${cfm.secret}”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cfm.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(value = <span class="string">"$&#123;cfm.secret&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(value = <span class="string">"$&#123;cfm.number&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(value = <span class="string">"$&#123;cfm.desc&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><p>新建一个test.properties放在src/main/resources下面：</p><figure class="highlight profile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.test.name="小明"</span><br><span class="line">com.test.say="hello~"</span><br></pre></td></tr></table></figure><p>新建一个Bean：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"com.test"</span>) </span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:test.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigTestBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String say;</span><br><span class="line">    <span class="comment">// 省略getter和setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="属性占位符"><a href="#属性占位符" class="headerlink" title="属性占位符"></a>属性占位符</h2><p>当application.properties里的值被使用时，它们会被存在的Environment过滤，所以你能够引用先前定义的值（比如，系统属性）。</p><figure class="highlight profile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cfm.name=www.daminga.com</span><br><span class="line">cfm.desc=$&#123;cfm.name&#125; is a domain name</span><br></pre></td></tr></table></figure><h2 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h2><p>application属性文件，按优先级排序，位置高的将覆盖位置低的</p><ol><li>当前目录下的一个/config子目录</li><li>当前目录</li><li>一个classpath下的/config包</li><li>classpath根路径（root）</li></ol><p>这个列表是按优先级排序的（列表中位置高的将覆盖位置低的）</p><h2 id="配置应用端口和其他配置"><a href="#配置应用端口和其他配置" class="headerlink" title="配置应用端口和其他配置"></a>配置应用端口和其他配置</h2><p>application.properties文件：<br><figure class="highlight profile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#应用端口</span><br><span class="line">server.port=8090</span><br><span class="line">#时间格式化</span><br><span class="line">spring.jackson.date-format=yyyy-MM-dd HH:mm:ss</span><br><span class="line">#时区设置</span><br><span class="line">spring.jackson.time-zone=Asia/Guangzhou</span><br></pre></td></tr></table></figure></p><p>application.properties也可以用application.yml文件代替：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment">#应用端口</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  jackson:</span></span><br><span class="line"><span class="comment">#时间格式化</span></span><br><span class="line"><span class="attr">    date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="attr">HH:mm:ss</span></span><br><span class="line">    <span class="comment">#时区设置</span></span><br><span class="line"><span class="attr">time-zone:</span> <span class="string">Asia/Guangzhou</span></span><br></pre></td></tr></table></figure><p>使用yml格式要注意冒号后面要跟空格。</p><h2 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h2><p>在Spring Boot中多环境配置文件名需要满足application-{profile}.properties的格式，其中{profile}对应你的环境标识。<br>针对各环境新建不同的配置文件application-dev.properties、application-test.properties、application-prod.properties在这三个文件均都设置不同的server.port属性，如：dev环境设置为8080，test环境设置为9090，prod环境设置为80，application.properties中设置spring.profiles.active=dev，就是说默认以dev环境设置。</p><ul><li>执行java -jar xxx.jar，可以观察到服务端口被设置为8080，也就是默认的开发环境（dev）</li><li>执行java -jar xxx.jar –spring.profiles.active=test，可以观察到服务端口被设置为9090，也就是测试环境的配置（test）</li><li>执行java -jar xxx.jar –spring.profiles.active=prod，可以观察到服务端口被设置为80，也就是生产环境的配置（prod）</li></ul><p><img src="/pic_home/springboot2/1535555622027.png" alt="avatar"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://tengj.top/2017/02/28/springboot2/" title="SpringBoot配置文件解析" target="_blank" rel="noopener">http://tengj.top/2017/02/28/springboot2/</a><br><a href="https://blog.csdn.net/l1028386804/article/details/80465834" title="SpringBoot之——多环境配置" target="_blank" rel="noopener">https://blog.csdn.net/l1028386804/article/details/80465834</a></p>]]></content>
      
      <categories>
          
          <category> SpringBoot 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springBoot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot 学习历程 ： HelloWorld</title>
      <link href="/2018/08/28/SpringBoot-%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B-%EF%BC%9A-HelloWorld/"/>
      <url>/2018/08/28/SpringBoot-%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B-%EF%BC%9A-HelloWorld/</url>
      <content type="html"><![CDATA[<h2 id="了解SpringBoot"><a href="#了解SpringBoot" class="headerlink" title="了解SpringBoot"></a>了解SpringBoot</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>springBoot是简化spring开发的过程， 更加敏捷开发spring应用程序，专注于应用程序的功能， 简化了配置的过程， 甚至不配置。可以通过内嵌Servlet容器（Tomcat/Jetty或Undertow）把web应用程序变成可自执行的JAR文件， 不用部署到传统的容器就能命令行里运行。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>创建独立的Spring应用程序</li><li>嵌入的Tomcat，无需部署WAR文件</li><li>简化Maven配置</li><li>自动配置Spring</li><li>提供生产就绪型功能，如指标，健康检查和外部配置</li><li>绝对没有代码生成并且对XML也没有配置要求</li></ol><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><p>这里使用<strong>IntelliJ IDEA</strong>创建一个<strong>Spring Initializr</strong>项目（一个web应用程序，能生成Spring Boot结构），步骤如下</p><p><img src="/pic_home/springboot1/csh1.jpg" alt="avatar"><br><img src="/pic_home/springboot1/1535464012958.png" alt="avatar"><br><img src="/pic_home/springboot1/1535464083792.png" alt="avatar"><br><img src="/pic_home/springboot1/1535464183422.png" alt="avatar"></p><p>创建完成后，查看pom.xml并添加缺少的依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cfm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>resources下的application可以是yml，properties格式，这里用的是yml格式。</p><p><img src="/pic_home/springboot1/1535465519502.png" alt="avatar"><br>application.yml文件配置如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">com:</span></span><br><span class="line"><span class="attr"> cfm:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">cfm</span> <span class="string">//自定义变量</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure></p><p>下面是DemoApplication文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cfm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span> <span class="comment">//等价于@Controller+@ResponseBody的结合，使用这个注解的类里面的方法都以json格式输出。</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span> <span class="comment">//Sprnig Boot项目的核心注解，主要目的是开启自动配置.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;com.cfm.name&#125;"</span>)<span class="comment">// 从application找到全局变量com.cfm.name</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello "</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行DemoApplication：</p><p><img src="/pic_home/springboot1/1535465859310.png" alt="avatar"></p>]]></content>
      
      <categories>
          
          <category> SpringBoot 学习历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springBoot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>springMvc+mybatis批量查询</title>
      <link href="/2018/08/16/springMvc-mybatis%E6%89%B9%E9%87%8F%E6%9F%A5%E8%AF%A2/"/>
      <url>/2018/08/16/springMvc-mybatis%E6%89%B9%E9%87%8F%E6%9F%A5%E8%AF%A2/</url>
      <content type="html"><![CDATA[<h1 id="springMvc-mybatis批量查询"><a href="#springMvc-mybatis批量查询" class="headerlink" title="springMvc+mybatis批量查询"></a>springMvc+mybatis批量查询</h1><p>项目环境基于springMvc+mybatis,数据库使用的是MySql。</p><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>页面效果如下，点击新增则增加一个相同的输入框，提交后显示多条订单的查询结果。<br><img src="https://i.imgur.com/GQPxDIj.jpg" alt=""><br>HTML主要代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"search_form"</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"Number"</span> <span class="attr">class</span>=<span class="string">"Number"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果不使用ajax方式提交，则直接使用按钮提交即可。<br>使用ajax提交可以使用jQuery ajax - <strong>serialize()</strong> 方法使提交操作更简洁。</p><p>serialize() 方法通过序列化表单值，创建 URL 编码文本字符串。<br>您可以选择一个或多个表单元素（比如 input 及/或 文本框），或者 form 元素本身。<br>序列化的值可在生成 AJAX 请求时用于 URL 查询字符串中。</p><p>语法</p><pre><code>$(selector).serialize()</code></pre><p>下面是使用ajax方式提交主要代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">''</span>, <span class="comment">//请求的地址</span></span><br><span class="line">data:$(<span class="string">'#search_form'</span>).serialize(),</span><br><span class="line">        beforeSend: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//ajax提交前执行的函数</span></span><br><span class="line">&#125;,</span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;<span class="comment">//ajax提交成功返回数据后执行的函数</span></span><br><span class="line">            $.each(result.orderList,<span class="function"><span class="keyword">function</span>(<span class="params">i, v</span>) </span>&#123;</span><br><span class="line"><span class="comment">//遍历返回的json数据</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="后端处理"><a href="#后端处理" class="headerlink" title="后端处理"></a>后端处理</h2><p>Controller层对应请求方法主要代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String[] numbers = request.getParameterValues(<span class="string">"Number"</span>);<span class="comment">// 接收数组变量（名字相同，但值有多个的数据）</span></span><br><span class="line">Map&lt;String, String[]&gt; map = <span class="keyword">new</span> HashMap&lt;String, String[]&gt;();</span><br><span class="line">map.put(<span class="string">"numbers"</span>, numbers);<span class="comment">//传入Mybatis参数为Map类型</span></span><br><span class="line">List&lt;Order&gt; orderlist = </span><br><span class="line">orderService.queryOrderListByNumbers(map);<span class="comment">//执行数据库操作，orderlist为查询结果</span></span><br></pre></td></tr></table></figure></p><p>dao层，service层代码省略。</p><p>model层OrderMapping.xml主要代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryOrderListByNumbers"</span> <span class="attr">resultMap</span>=<span class="string">"OrderMap"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.Map"</span>&gt;</span></span><br><span class="line">SELECT * FROM T_ORDER </span><br><span class="line">WHRER ORDER_NUMBER IN</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"numbers"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">           #&#123;item&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span>//mybatis遍历map参数</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>参考资料：<a href="http://www.w3school.com.cn/jquery/ajax_serialize.asp" title="jQuery ajax - serialize() 方法" target="_blank" rel="noopener">http://www.w3school.com.cn/jquery/ajax_serialize.asp</a></p>]]></content>
      
      <categories>
          
          <category> Java随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
            <tag> springMvc </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于跨域问题</title>
      <link href="/2018/08/05/%E5%85%B3%E4%BA%8E%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/2018/08/05/%E5%85%B3%E4%BA%8E%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="关于跨域问题"><a href="#关于跨域问题" class="headerlink" title="关于跨域问题"></a>关于跨域问题</h1><h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h2><p>浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域。 </p><h2 id="怎么解决跨域问题"><a href="#怎么解决跨域问题" class="headerlink" title="怎么解决跨域问题"></a>怎么解决跨域问题</h2><h3 id="1-使用jsonp"><a href="#1-使用jsonp" class="headerlink" title="1.使用jsonp"></a>1.使用jsonp</h3><p>Jsonp(JSON with Padding) 是 json 的一种”使用模式”，可以让网页从别的域名（网站）那获取资料，即跨域读取数据。<br>以下是jquery使用jsonp的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   $.getJSON(</span><br><span class="line">url,                 <span class="comment">//请求URL</span></span><br><span class="line">    [data],           <span class="comment">//传参，可选参数4 ，</span></span><br><span class="line">       [callback]       <span class="comment">//回调函数，可选参数, </span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        alert(data[i]);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>当然也可以用$.ajax的方式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">   url: <span class="string">""</span>,</span><br><span class="line">type: <span class="string">"GET"</span>,<span class="comment">//这里只有get 类型可用，即使设置了 post类型，还是使用的get </span></span><br><span class="line">dataType: <span class="string">"jsonp"</span>, <span class="comment">//指定服务器返回的数据类型</span></span><br><span class="line">success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">JSON</span>.stringify(data); <span class="comment">//json对象转成字符串</span></span><br><span class="line">       &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>注意，这里返回的data格式不是<strong>json</strong>格式，而应该是<strong>jsonp</strong>格式如”callback({“id”: 1, “name” : 小明, “age”: 21})”，在json格式外面多了一层括号，ajax返回数据类型必须和请求参数格式一致，不然会导致返回跳到error，所以使用这种方式后端要多加数据格式处理。</p><h3 id="2-使用Access-Control-Allow-Origin"><a href="#2-使用Access-Control-Allow-Origin" class="headerlink" title="2.使用Access-Control-Allow-Origin"></a>2.使用Access-Control-Allow-Origin</h3><p>Access-Control-Allow-Origin是HTML5中定义的一种解决资源跨域的策略。</p><p>他是通过服务器端返回带有Access-Control-Allow-Origin标识的Response header，用来解决资源的跨域权限问题。</p><p>在服务端添加如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定允许其他域名访问，'*'代表允许所有域名访问</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line"><span class="comment">//指定允许的请求方式 </span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST, GET, OPTIONS, DELETE"</span>);</span><br><span class="line"><span class="comment">//表明在3600秒内，不需要再发送预检验请求，可以缓存该结果</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>);</span><br><span class="line"><span class="comment">//响应头设置， X-Request-With为ajax请求的响应头  </span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Origin, No-Cache, X-Requested-With, If-Modified-Since, Pragma, </span></span><br><span class="line"><span class="string">Last-Modified, Cache-Control"</span>);</span><br><span class="line"><span class="comment">//表示是否允许发送Cookie,默认情况下，Cookie不包括在CORS请求之中,设为true，即表示服务器明确许可  </span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</span><br><span class="line"><span class="comment">//IE8引入XDomainRequest</span></span><br><span class="line">response.setHeader(<span class="string">"XDomainRequestAllowed"</span>,<span class="string">"1"</span>);</span><br></pre></td></tr></table></figure></p><p>前端正常的ajax调用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   $.ajax(&#123;</span><br><span class="line">url:<span class="string">""</span>,</span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>个人推荐第二种方法，后台无需做数据格式处理，正常返回json格式即可。</p><p>参考链接：<br><a href="http://www.runoob.com/json/json-jsonp.html" title="JSONP 教程" target="_blank" rel="noopener">http://www.runoob.com/json/json-jsonp.html</a><br><a href="https://blog.csdn.net/abs1004/article/details/76895652" title="thinkphp ajax 跨域请求 Access-Control-Allow-Origin 完美解决" target="_blank" rel="noopener">https://blog.csdn.net/abs1004/article/details/76895652</a>  </p>]]></content>
      
      <categories>
          
          <category> Java随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
